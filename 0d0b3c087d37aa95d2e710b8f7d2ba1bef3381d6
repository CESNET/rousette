{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "32d631e1_4f23a93c",
        "filename": "/PATCHSET_LEVEL",
        "patchSetId": 4
      },
      "lineNbr": 0,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-10-25T18:17:29Z",
      "side": 1,
      "message": "I think this looks mostly good. There are a lot of complaints from clang-format though...\nLet me do another sweep on this later, after I understand the PAM api.",
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "d0f1b63d_6b465484",
        "filename": "src/restconf/Nacm.cpp",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-10-25T18:17:29Z",
      "side": 1,
      "message": "nit: this is perhaps for another patch",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 57
      },
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3a7a2552_592890da",
        "filename": "src/restconf/Nacm.cpp",
        "patchSetId": 4
      },
      "lineNbr": 102,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T20:49:05Z",
      "side": 1,
      "message": "The reason why I added it in the first place is [1]. I actually spent quite some time trying to figure out why a simple data retrieval was failing. The fact that all auth-related failure responses that go out via HTTP are just \"Authentication failed\", which is a deliberate decision, didn\u0027t help; I was thinking that the code must be wrong, but in the end it was just a missing NACM rule. That\u0027s why I added an explicit logging output here, and I think that a similar situation would not have happened prior to this patch, so I\u0027d prefer to keep it as-is.\n\n[1] https://gerrit.cesnet.cz/c/CzechLight/rousette/+/6520/5/tests/http-communication.cpp#161",
      "parentUuid": "d0f1b63d_6b465484",
      "range": {
        "startLine": 102,
        "startChar": 0,
        "endLine": 102,
        "endChar": 57
      },
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "0e42e770_14fdc0ce",
        "filename": "src/restconf/PAM.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-10-25T18:17:29Z",
      "side": 1,
      "message": "nit rousette was not there in 2016 (same in other files)",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "38010bf2_3a52279c",
        "filename": "src/restconf/PAM.cpp",
        "patchSetId": 4
      },
      "lineNbr": 2,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T19:10:10Z",
      "side": 1,
      "message": "Done, since this is a self-contained file. I won\u0027t be changing the existing files, though (the root cause is that we\u0027re usually copying some common bits around, yeah, I know it sucks, but it\u0027s how we create these projects anyway).",
      "parentUuid": "0e42e770_14fdc0ce",
      "range": {
        "startLine": 2,
        "startChar": 17,
        "endLine": 2,
        "endChar": 26
      },
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "7aa20d33_5754cb23",
        "filename": "src/restconf/PAM.cpp",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-10-25T18:17:29Z",
      "side": 1,
      "message": "What is the reason behind having spdlog include here?",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 1
      },
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "11e6c97e_11eb1812",
        "filename": "src/restconf/PAM.cpp",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T19:10:10Z",
      "side": 1,
      "message": "There\u0027s some direct logging in pam_userpass_conv(). Originally, I was throwing exceptions in there, but it\u0027s a C function that gets executed from a C library which makes assumptions about error handling that is expected to be done via return values. If the code throws, then even when I catch that exceptions thrown (indirectly) by pam_authenticate, the C PAM library would leak memory. So I came up with logging the error directly.\n\nNow, two of these cases are a failing strdup(), which probably means that we\u0027re FUBAR anyway, and good luck logging in that case. But the thrid case is the PAM_ERROR_MSG and PAM_TEXT_INFO cases (or an unhandled conversation type), and I\u0027d like to have real error handling for these situations.",
      "parentUuid": "7aa20d33_5754cb23",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 1
      },
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "dd8de9b9_43cd0a43",
        "filename": "src/restconf/PAM.cpp",
        "patchSetId": 4
      },
      "lineNbr": 17,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-30T11:13:31Z",
      "side": 1,
      "message": "done -- it was about weird #include order",
      "parentUuid": "11e6c97e_11eb1812",
      "range": {
        "startLine": 17,
        "startChar": 0,
        "endLine": 17,
        "endChar": 1
      },
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79b78e1d_9b0efb34",
        "filename": "src/restconf/PAM.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-10-25T18:17:29Z",
      "side": 1,
      "message": "Could we please make this a struct with named fields? I know, we probably have to add boost fusion but I agree with your opinion from last week that those .first and .second members are unreadable.",
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "44d0bdea_67c9d197",
        "filename": "src/restconf/PAM.cpp",
        "patchSetId": 4
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T19:10:10Z",
      "side": 1,
      "message": "Good catch, and you\u0027re absolutely right. In fact, I made a mistake in one of the previous versions of this patch where I fed the PAM code the .first (i.e., username) for both PAM_PROMPT_ECHO_ON and PAM_PROMPT_ECHO_OFF cases :). Thanks for catching this.",
      "parentUuid": "79b78e1d_9b0efb34",
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "6410eab7_4c6fbe50",
        "filename": "tests/pam.cpp",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-10-25T18:17:29Z",
      "side": 1,
      "message": "Could we add tests with multiple colons encoded in the string? The parser seems ok, just to be sure.",
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "495a9b01_5f0f5be5",
        "filename": "tests/pam.cpp",
        "patchSetId": 4
      },
      "lineNbr": 72,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-10-25T20:49:05Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "6410eab7_4c6fbe50",
      "revId": "0d0b3c087d37aa95d2e710b8f7d2ba1bef3381d6",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}