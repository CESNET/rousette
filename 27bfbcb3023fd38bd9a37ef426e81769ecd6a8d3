{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "06aad206_e9a2e532",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 41,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "I don\u0027t think a new datatype is needed here; just use libyang::DataFormat and add a free-standing function to produce a textual representation. You might even add it to libyang-cpp.",
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3d9a1fab_19de2025",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 75,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "I see why this \"special casing\" is needed (you need a MIME type to return a properly formatted error message), but I think this is not pretty. Ideally, I would prefer a common error path where any error situation encountered during handling this request leads to an exception that\u0027s later caught and transformed into a proper error reply. I think this is also doable here; the caller of this function might simply initialize the MIME type to JSON (it\u0027s an arbitrary choice, really), call a new version of this function `void guessMimeType(const header_map\u0026 headers, /* NON CONST! */ libyang::DataType\u0026 mime)`, and if it threw, well, there\u0027s a common try/catch block.\n\nIf you do not prefer that for some reason, as a minimum please do not touch the `res`. Do not produce the error reply manually from this function, just let the error propagate and call rejectWithError(...) from the caller. I was surprised that this modifies the reply directly in any way (and I had to read the docs to find that out).",
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "cf2a59d9_04a98b96",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 81,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "nit: because of DRY, it might make sense to call asMimeType(libyang::DataFormat::JSON) instead of hardcoding these",
      "range": {
        "startLine": 80,
        "startChar": 0,
        "endLine": 81,
        "endChar": 64
      },
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c66554a8_c75f5089",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 90,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "This comment says that you\u0027re aware of the fact that the format is different, yet this code calls the same function anyway. IMHO, the comment should also very briefly explain why this is a good thing and why it still produces correct results.",
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ac3d5b80_dfc11e76",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 99,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "this will need to support wildcard MIME types (and subtypes, too)",
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "db82ab08_8748815c",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 105,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "nit: this might be made easier (also below) by a new function:\n \nstd::optional\u003clibyang::DataFormat\u003e dataTypeFromMimeType(const std::string\u0026 mime)",
      "range": {
        "startLine": 101,
        "startChar": 0,
        "endLine": 105,
        "endChar": 13
      },
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "af7f8f12_e6b92ba8",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 108,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "nit: I think we need something like `commonHeaders(std::vector\u003c...\u003e extraHeaders \u003d {})` which always produces this CORS one in addition to any of them that are requested. Or maybe just some const variables for that string name, at least...\n\nOK, this is for another patch I suppose.",
      "range": {
        "startLine": 108,
        "startChar": 28,
        "endLine": 108,
        "endChar": 75
      },
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "4cdbd8b9_3b5c3abe",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 2
      },
      "lineNbr": 221,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-08-24T13:43:50Z",
      "side": 1,
      "message": "Why is this needed? asLibyangPath() already checks that it\u0027s something that can be retrieved via GET.",
      "range": {
        "startLine": 218,
        "startChar": 16,
        "endLine": 221,
        "endChar": 17
      },
      "revId": "27bfbcb3023fd38bd9a37ef426e81769ecd6a8d3",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}