{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "1c4ec3c7_4370d1e8",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 30
      },
      "lineNbr": 219,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-21T14:02:55Z",
      "side": 1,
      "message": "I wanted to suggest doing a simple `foo + \":\"s + bar`, and then I realized that `foo` and `bar` are `std::string_view :(. Now I want to nuke these, again...",
      "range": {
        "startLine": 219,
        "startChar": 45,
        "endLine": 219,
        "endChar": 57
      },
      "revId": "fafc7c0c534453c05a02c657aca2f41f0b835dae",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "55157b29_6b6b361e",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 30
      },
      "lineNbr": 40,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-21T14:02:55Z",
      "side": 1,
      "message": "This looks dangerous. The underlying memory will surely be gone \"soon enough\"; the only reason why this works IMHO is that it is only used for expectation checking, and any mismatch is reported immediately, before the outer function call returns.\n\nStill, please use a plain std::string here.",
      "range": {
        "startLine": 40,
        "startChar": 23,
        "endLine": 40,
        "endChar": 34
      },
      "revId": "fafc7c0c534453c05a02c657aca2f41f0b835dae",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "a7410436_e83cc43c",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 30
      },
      "lineNbr": 117,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-21T14:02:55Z",
      "side": 1,
      "message": "nit: be terse please (also everywhere below)",
      "range": {
        "startLine": 117,
        "startChar": 17,
        "endLine": 117,
        "endChar": 22
      },
      "revId": "fafc7c0c534453c05a02c657aca2f41f0b835dae",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "f5176a61_7b30195a",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 30
      },
      "lineNbr": 644,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-21T14:02:55Z",
      "side": 1,
      "message": "This is about having *extra* elements where that extra element is present as the first one. That\u0027s a little bit different than just the order of (valid) elements.",
      "range": {
        "startLine": 644,
        "startChar": 16,
        "endLine": 644,
        "endChar": 56
      },
      "revId": "fafc7c0c534453c05a02c657aca2f41f0b835dae",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}