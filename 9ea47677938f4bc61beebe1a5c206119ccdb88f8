{
  "comments": [
    {
      "unresolved": false,
      "key": {
        "uuid": "883c4d08_c9a1df00",
        "filename": "src/restconf/uri_yang_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-26T07:43:31Z",
      "side": 1,
      "message": "Remember me well -- this will come and bite someone on December 31st, 9999.",
      "range": {
        "startLine": 23,
        "startChar": 85,
        "endLine": 23,
        "endChar": 86
      },
      "revId": "9ea47677938f4bc61beebe1a5c206119ccdb88f8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "3dea66fc_095d32be",
        "filename": "src/restconf/uri_yang_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 23,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-02-27T12:55:28Z",
      "side": 1,
      "message": "I don\u0027t think the humanity survives past the year 2150, but hey, I fixed that (and added a test).\n\nI could not find if it is even allowed. The RFC states that revision dates are in format YYYY-MM-DD (https://www.rfc-editor.org/rfc/rfc7950#section-7.1.9). So I went into libyang\u0027s code and I don\u0027t think it will work after 9999 :-) (https://github.com/CESNET/libyang/blob/fc4dbd923e044006c93df020590a1e5a8656c09e/src/tree_schema_common.c#L63)",
      "parentUuid": "883c4d08_c9a1df00",
      "range": {
        "startLine": 23,
        "startChar": 85,
        "endLine": 23,
        "endChar": 86
      },
      "revId": "9ea47677938f4bc61beebe1a5c206119ccdb88f8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "bf9b7173_5de71b49",
        "filename": "src/restconf/uri_yang_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-26T07:43:31Z",
      "side": 1,
      "message": "I think that this trailing slash is less useful than accepting a trailing `.yang`. Neither is needed, but \"nobody\" would send a slash, but I think that lazy people might code with the .yang suffix.",
      "range": {
        "startLine": 24,
        "startChar": 163,
        "endLine": 24,
        "endChar": 179
      },
      "revId": "9ea47677938f4bc61beebe1a5c206119ccdb88f8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "27ed9a2f_c4affa57",
        "filename": "src/restconf/uri_yang_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-02-27T12:55:28Z",
      "side": 1,
      "message": "I have removed the trailing slash, it probably makes no sense here. However, the optional \".yang\" suffix really makes sense here.\nBut then there is an interesting question. YANG module names can contain dots (https://www.rfc-editor.org/rfc/rfc7950#section-7.1): What is the module name in the following URI? `/yang/yang.yang` Is it `yang` or `yang.yang`? What if I have both installed? :-)",
      "parentUuid": "bf9b7173_5de71b49",
      "range": {
        "startLine": 24,
        "startChar": 163,
        "endLine": 24,
        "endChar": 179
      },
      "revId": "9ea47677938f4bc61beebe1a5c206119ccdb88f8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35cd04d1_cce34989",
        "filename": "src/restconf/uri_yang_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-27T14:22:57Z",
      "side": 1,
      "message": "Nice catch. Let\u0027s only allow the trailing .yang when the revision is present, then.",
      "parentUuid": "27ed9a2f_c4affa57",
      "range": {
        "startLine": 24,
        "startChar": 163,
        "endLine": 24,
        "endChar": 179
      },
      "revId": "9ea47677938f4bc61beebe1a5c206119ccdb88f8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "8529d6b5_9d95a9c9",
        "filename": "src/restconf/uri_yang_schema.cpp",
        "patchSetId": 1
      },
      "lineNbr": 24,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2024-02-28T14:04:33Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "35cd04d1_cce34989",
      "range": {
        "startLine": 24,
        "startChar": 163,
        "endLine": 24,
        "endChar": 179
      },
      "revId": "9ea47677938f4bc61beebe1a5c206119ccdb88f8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "35c7500d_2ebace5f",
        "filename": "tests/uri-parser.cpp",
        "patchSetId": 1
      },
      "lineNbr": 716,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2024-02-26T07:43:31Z",
      "side": 1,
      "message": "Is the missing leading slash intentional? If so, I\u0027d prefer to have it as the only \"failing reason\" on that particular string, not with an invalid date like it\u0027s done here",
      "range": {
        "startLine": 716,
        "startChar": 21,
        "endLine": 716,
        "endChar": 26
      },
      "revId": "9ea47677938f4bc61beebe1a5c206119ccdb88f8",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}