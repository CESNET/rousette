{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "3000916f_d78505b9",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 63,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "now just:\n a.schema() \u003d\u003d b",
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "346b9344_8c2a86af",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 63,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-11-06T17:54:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "3000916f_d78505b9",
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "b9fee38e_5654b93f",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 204,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "nit: let\u0027s wrap this line, please",
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "2f502cb1_eae596dc",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 204,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-11-06T17:54:18Z",
      "side": 1,
      "message": "I have decomposed the return expression to make the code more \"wrappable\" and the output of clang-format readable.",
      "parentUuid": "b9fee38e_5654b93f",
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "450c2317_2b8c570e",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 225,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "docs is missing here",
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "09990c42_920f9cbd",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 225,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-11-06T17:54:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "450c2317_2b8c570e",
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "c5d34f2b_497b4698",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 242,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "These are quite complex to read. In particular, `getKeyPosition` is only required because the code iterates over the items which are provided in the data payload. What about doing it the other way round, like this:\n\n if (isSameChild...) {\n   checkKeysMismatch(...);\n   replacementNode \u003d child;\n } else if (isKeyNode(...)) {\n   // do nothing here, key values are checked elsewhere\n } else {\n   throw \"wrong node X\"\n }\n\n void checkKeysMismatch(node, list)\n {\n   if (isList) {\n     for (int i \u003d 0; i \u003c list.keys.size; ++i) {\n       auto inUrl \u003d pathSegment.keys[i];\n       auto inPayload \u003d node.sibling(list.keys[i].name)\n       if (inUrl !\u003d inPayload) {\n         throw \"wrong key\" ... list.keys[1].name, inUrl, inPayload\n       }\n     }\n   }\n }\n\n\nPlease feel free to tell me that nope, that would be too complex as well -- maybe you\u0027ve already tried that.",
      "range": {
        "startLine": 209,
        "startChar": 0,
        "endLine": 242,
        "endChar": 1
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3234486b_c15968d5",
        "filename": "src/restconf/Server.cpp",
        "patchSetId": 22
      },
      "lineNbr": 330,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "Some of these handlers duplicate what\u0027s already being checked in the generic request handler. I understand that this runs through a lambda, and therefore the \"outer\" `catch` statements in there won\u0027t take effect, but I wonder if there\u0027s a way to deduplicate this code. Can you see a way which does not suck?\n\n- macros (\"meh\")\n- a wrapper which runs a lambda that\u0027s passed in a try/catch (maybe \"meh\" a bit?)\n- something else?",
      "range": {
        "startLine": 313,
        "startChar": 0,
        "endLine": 330,
        "endChar": 5
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "daad3676_b6f7365c",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 22
      },
      "lineNbr": 67,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "It confuses me when something that is not an iterator is called an iterator :). What about `storeChanges`?",
      "range": {
        "startLine": 67,
        "startChar": 9,
        "endLine": 67,
        "endChar": 23
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "801eddb8_1379a36e",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 22
      },
      "lineNbr": 67,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "It\u0027s a lambda, yet it\u0027s got an argument which tells it what mock object to work on. Please either make it a freestanding function, or change this parameter to a capture.",
      "range": {
        "startLine": 67,
        "startChar": 43,
        "endLine": 67,
        "endChar": 59
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "c4846151_d12f5526",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 22
      },
      "lineNbr": 67,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-11-06T17:54:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "daad3676_b6f7365c",
      "range": {
        "startLine": 67,
        "startChar": 9,
        "endLine": 67,
        "endChar": 23
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "042ee444_602ed312",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 22
      },
      "lineNbr": 67,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-11-06T17:54:18Z",
      "side": 1,
      "message": "Done",
      "parentUuid": "801eddb8_1379a36e",
      "range": {
        "startLine": 67,
        "startChar": 43,
        "endLine": 67,
        "endChar": 59
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "25a89705_86e884e7",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 22
      },
      "lineNbr": 80,
      "author": {
        "id": 1000000
      },
      "writtenOn": "2023-11-06T14:51:00Z",
      "side": 1,
      "message": "I\u0027d prefer that the lambda rememebers the module name, and then computes this ugly XPath on the fly.\n\nOr maybe even take it one step further. Since this thing is already present twice, once for each module, consuder a helper which just gets you a subscription, and which sets up that callback internally.",
      "range": {
        "startLine": 80,
        "startChar": 48,
        "endLine": 80,
        "endChar": 67
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    },
    {
      "unresolved": false,
      "key": {
        "uuid": "bb034c00_d90cf951",
        "filename": "tests/restconf-writing.cpp",
        "patchSetId": 22
      },
      "lineNbr": 80,
      "author": {
        "id": 1000070
      },
      "writtenOn": "2023-11-06T17:54:18Z",
      "side": 1,
      "message": "I was too lazy. I agree I should have done that. :( Done.",
      "parentUuid": "25a89705_86e884e7",
      "range": {
        "startLine": 80,
        "startChar": 48,
        "endLine": 80,
        "endChar": 67
      },
      "revId": "9653e527ce70f3209aa16ea9a3be2e6a71989f83",
      "serverId": "e32f8df8-3db0-4f76-a6c6-fe9d6e69dd68"
    }
  ]
}